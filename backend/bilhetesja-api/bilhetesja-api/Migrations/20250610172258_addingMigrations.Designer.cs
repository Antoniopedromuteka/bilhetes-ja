// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using bilhetesja_api.Data;

#nullable disable

namespace bilhetesja_api.Migrations
{
    [DbContext(typeof(BilheteJaDbContext))]
    [Migration("20250610172258_addingMigrations")]
    partial class addingMigrations
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.3");

            modelBuilder.Entity("bilhetesja_api.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("IconUrl")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("bilhetesja_api.Entities.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CategoriaId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DataEvento")
                        .HasColumnType("TEXT");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("ImagemId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Local")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("LotacaoTotal")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("OrganizadorId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("CategoriaId");

                    b.HasIndex("ImagemId");

                    b.HasIndex("OrganizadorId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("bilhetesja_api.Entities.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DataUpload")
                        .HasColumnType("TEXT");

                    b.Property<string>("NomeArquivo")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<long>("Tamanho")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("bilhetesja_api.Entities.OrganizerRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DataSolicitacao")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("OrganizerRequests");
                });

            modelBuilder.Entity("bilhetesja_api.Entities.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Comissao")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DataPagamento")
                        .HasColumnType("TEXT");

                    b.Property<string>("Metodo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<string>("StripeId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TicketId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("ValorLiquido")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("ValorTotal")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TicketId")
                        .IsUnique();

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("bilhetesja_api.Entities.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CodigoQR")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DataCompra")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TipoId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TipoId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("bilhetesja_api.Entities.TicketType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("EventoId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Preco")
                        .HasColumnType("TEXT");

                    b.Property<int>("Quantidade")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EventoId");

                    b.ToTable("TicketTypes");
                });

            modelBuilder.Entity("bilhetesja_api.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int?>("ImagemId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("SenhaHash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Telefone")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<int>("TipoUsuario")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("ImagemId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("bilhetesja_api.Entities.Wallet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("SaldoDisponivel")
                        .HasColumnType("TEXT");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId")
                        .IsUnique();

                    b.ToTable("Wallets");
                });

            modelBuilder.Entity("bilhetesja_api.Entities.WalletTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Data")
                        .HasColumnType("TEXT");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("EventoId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TicketId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Valor")
                        .HasColumnType("TEXT");

                    b.Property<int>("WalletId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EventoId");

                    b.HasIndex("TicketId");

                    b.HasIndex("WalletId");

                    b.ToTable("WalletTransactions");
                });

            modelBuilder.Entity("bilhetesja_api.Entities.Event", b =>
                {
                    b.HasOne("bilhetesja_api.Entities.Category", "Categoria")
                        .WithMany("Eventos")
                        .HasForeignKey("CategoriaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("bilhetesja_api.Entities.Image", "Imagem")
                        .WithMany("Eventos")
                        .HasForeignKey("ImagemId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("bilhetesja_api.Entities.User", "Organizador")
                        .WithMany("EventosOrganizados")
                        .HasForeignKey("OrganizadorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Categoria");

                    b.Navigation("Imagem");

                    b.Navigation("Organizador");
                });

            modelBuilder.Entity("bilhetesja_api.Entities.OrganizerRequest", b =>
                {
                    b.HasOne("bilhetesja_api.Entities.User", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("bilhetesja_api.Entities.Payment", b =>
                {
                    b.HasOne("bilhetesja_api.Entities.Ticket", "Ticket")
                        .WithOne("Pagamento")
                        .HasForeignKey("bilhetesja_api.Entities.Payment", "TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("bilhetesja_api.Entities.Ticket", b =>
                {
                    b.HasOne("bilhetesja_api.Entities.TicketType", "Tipo")
                        .WithMany("Bilhetes")
                        .HasForeignKey("TipoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("bilhetesja_api.Entities.User", "Usuario")
                        .WithMany("TicketsComprados")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tipo");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("bilhetesja_api.Entities.TicketType", b =>
                {
                    b.HasOne("bilhetesja_api.Entities.Event", "Evento")
                        .WithMany("TiposBilhetes")
                        .HasForeignKey("EventoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Evento");
                });

            modelBuilder.Entity("bilhetesja_api.Entities.User", b =>
                {
                    b.HasOne("bilhetesja_api.Entities.Image", "Imagem")
                        .WithMany("Usuarios")
                        .HasForeignKey("ImagemId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Imagem");
                });

            modelBuilder.Entity("bilhetesja_api.Entities.Wallet", b =>
                {
                    b.HasOne("bilhetesja_api.Entities.User", "Usuario")
                        .WithOne("Carteira")
                        .HasForeignKey("bilhetesja_api.Entities.Wallet", "UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("bilhetesja_api.Entities.WalletTransaction", b =>
                {
                    b.HasOne("bilhetesja_api.Entities.Event", "Evento")
                        .WithMany()
                        .HasForeignKey("EventoId");

                    b.HasOne("bilhetesja_api.Entities.Ticket", "Ticket")
                        .WithMany()
                        .HasForeignKey("TicketId");

                    b.HasOne("bilhetesja_api.Entities.Wallet", "Wallet")
                        .WithMany("Transacoes")
                        .HasForeignKey("WalletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Evento");

                    b.Navigation("Ticket");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("bilhetesja_api.Entities.Category", b =>
                {
                    b.Navigation("Eventos");
                });

            modelBuilder.Entity("bilhetesja_api.Entities.Event", b =>
                {
                    b.Navigation("TiposBilhetes");
                });

            modelBuilder.Entity("bilhetesja_api.Entities.Image", b =>
                {
                    b.Navigation("Eventos");

                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("bilhetesja_api.Entities.Ticket", b =>
                {
                    b.Navigation("Pagamento");
                });

            modelBuilder.Entity("bilhetesja_api.Entities.TicketType", b =>
                {
                    b.Navigation("Bilhetes");
                });

            modelBuilder.Entity("bilhetesja_api.Entities.User", b =>
                {
                    b.Navigation("Carteira");

                    b.Navigation("EventosOrganizados");

                    b.Navigation("TicketsComprados");
                });

            modelBuilder.Entity("bilhetesja_api.Entities.Wallet", b =>
                {
                    b.Navigation("Transacoes");
                });
#pragma warning restore 612, 618
        }
    }
}
